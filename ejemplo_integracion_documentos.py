#!/usr/bin/env python3
"""
Ejemplo pr√°ctico de la integraci√≥n de documentos en el system prompt.
Muestra c√≥mo toda la informaci√≥n subida por el abogado se usa autom√°ticamente en la generaci√≥n de demandas.
"""

import asyncio
import sys
import os
from datetime import datetime

# Agregar el directorio ra√≠z al path
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

async def ejemplo_integracion_completa():
    """Ejemplo completo de integraci√≥n de documentos en demandas."""
    
    print("üöÄ EJEMPLO PR√ÅCTICO: INTEGRACI√ìN DE DOCUMENTOS EN SYSTEM PROMPT")
    print("=" * 80)
    
    print("\nüìã ESCENARIO:")
    print("Un abogado sube los siguientes documentos en el chat:")
    print("1. Telegrama de despido")
    print("2. Liquidaci√≥n final")
    print("3. Recibo de sueldo")
    print("4. Carta documento")
    
    print("\nüîç PROCESO AUTOM√ÅTICO:")
    print("1. Sistema extrae TODO el contenido con GPT-4 Vision")
    print("2. Identifica personas, empresas, fechas, montos")
    print("3. Consolida toda la informaci√≥n")
    print("4. La incluye autom√°ticamente en el system prompt")
    print("5. Genera demanda enriquecida con evidencia documental")
    
    print("\nüìÑ SIMULANDO DOCUMENTOS SUBIDOS...")
    
    # Simular informaci√≥n extra√≠da de documentos
    informacion_documentos = {
        'transcripcion_completa': """
=== TELEGRAMA DE DESPIDO ===
TELEGRAMA N¬∞ 12345
Fecha: 15/03/2024
Remitente: EMPRESA XYZ S.A.
Destinatario: Juan P√©rez
DNI: 12345678
Domicilio: Av. Corrientes 1234, CABA

Por la presente se le comunica que a partir del d√≠a 16/03/2024 queda desvinculado de la empresa sin causa aparente.

=== LIQUIDACI√ìN FINAL ===
LIQUIDACI√ìN FINAL
Empleado: Juan P√©rez
DNI: 12345678
Fecha de ingreso: 01/01/2020
Fecha de egreso: 16/03/2024
Sueldo b√°sico: $150.000
Indemnizaci√≥n por despido: $450.000
Vacaciones no gozadas: $75.000
Total a cobrar: $675.000

=== RECIBO DE SUELDO ===
RECIBO DE SUELDO - MARZO 2024
Empleado: Juan P√©rez
DNI: 12345678
Categor√≠a: Administrativo
Sueldo b√°sico: $150.000
Presentismo: $15.000
Total bruto: $165.000
Descuentos: $33.000
Neto a cobrar: $132.000

=== CARTA DOCUMENTO ===
CARTA DOCUMENTO N¬∞ 98765
Fecha: 10/03/2024
Remitente: Juan P√©rez
Destinatario: EMPRESA XYZ S.A.
Domicilio: Av. Corrientes 1234, CABA

Se reclama el pago de salarios adeudados y la regularizaci√≥n de la situaci√≥n laboral.
        """,
        'personas_identificadas': ['Juan P√©rez'],
        'empresas_identificadas': ['EMPRESA XYZ S.A.'],
        'fechas_importantes': [
            {'fecha': '15/03/2024', 'evento': 'Telegrama de despido enviado'},
            {'fecha': '16/03/2024', 'evento': 'Fecha de despido efectivo'},
            {'fecha': '01/01/2020', 'evento': 'Fecha de ingreso'},
            {'fecha': '10/03/2024', 'evento': 'Carta documento enviada'}
        ],
        'montos_encontrados': [
            {'concepto': 'sueldo_basico', 'monto': '$150.000'},
            {'concepto': 'indemnizacion_despido', 'monto': '$450.000'},
            {'concepto': 'vacaciones_no_gozadas', 'monto': '$75.000'},
            {'concepto': 'total_liquidacion', 'monto': '$675.000'},
            {'concepto': 'presentismo', 'monto': '$15.000'},
            {'concepto': 'neto_cobrar', 'monto': '$132.000'}
        ],
        'datos_contacto': {
            'telefonos': ['011-1234-5678'],
            'emails': ['juan.perez@email.com'],
            'domicilios': ['Av. Corrientes 1234, CABA']
        }
    }
    
    print(f"‚úÖ Informaci√≥n extra√≠da:")
    print(f"   üìù Transcripci√≥n: {len(informacion_documentos['transcripcion_completa'])} caracteres")
    print(f"   üë• Personas: {', '.join(informacion_documentos['personas_identificadas'])}")
    print(f"   üè¢ Empresas: {', '.join(informacion_documentos['empresas_identificadas'])}")
    print(f"   üìÖ Fechas importantes: {len(informacion_documentos['fechas_importantes'])}")
    print(f"   üí∞ Montos: {len(informacion_documentos['montos_encontrados'])}")
    
    print("\nü§ñ GENERANDO DEMANDA CON INFORMACI√ìN INTEGRADA...")
    
    try:
        from rag.qa_agent import generar_demanda
        
        # Datos del cliente
        datos_cliente = {
            "nombre_completo": "Juan P√©rez",
            "dni": "12345678",
            "domicilio": "Av. Corrientes 1234, CABA",
            "telefono": "011-1234-5678",
            "email": "juan.perez@email.com",
            "ocupacion": "Administrativo"
        }
        
        # Generar demanda con informaci√≥n de documentos
        resultado = await generar_demanda(
            tipo_demanda="Despido injustificado",
            datos_cliente=datos_cliente,
            hechos_adicionales="El cliente fue despedido sin causa aparente",
            notas_abogado="Caso con documentaci√≥n completa: telegrama, liquidaci√≥n, recibo y carta documento",
            session_id="ejemplo-session-123"
        )
        
        print(f"‚úÖ Demanda generada exitosamente")
        print(f"   üìÑ Longitud: {len(resultado.get('texto_demanda', ''))} caracteres")
        print(f"   üìÅ Archivo: {resultado.get('archivo_docx', 'No generado')}")
        
        # Mostrar metadatos
        metadatos = resultado.get('metadatos', {})
        print(f"\nüìä METADATOS DE LA GENERACI√ìN:")
        print(f"   üìã Cliente: {metadatos.get('cliente', 'N/A')}")
        print(f"   üè∑Ô∏è Tipo: {metadatos.get('tipo_demanda', 'N/A')}")
        print(f"   ‚è±Ô∏è Tiempo: {metadatos.get('tiempo_generacion', 0):.2f} segundos")
        print(f"   üìö Casos consultados: {metadatos.get('casos_consultados', 0)}")
        print(f"   üìÑ Documentos utilizados: {metadatos.get('documentos_utilizados', False)}")
        print(f"   üë• Personas en documentos: {metadatos.get('personas_documentos', 0)}")
        print(f"   üè¢ Empresas en documentos: {metadatos.get('empresas_documentos', 0)}")
        print(f"   üìÖ Fechas en documentos: {metadatos.get('fechas_documentos', 0)}")
        print(f"   üí∞ Montos en documentos: {metadatos.get('montos_documentos', 0)}")
        
        # Mostrar fragmento de la demanda generada
        texto_demanda = resultado.get('texto_demanda', '')
        print(f"\nüìù FRAGMENTO DE LA DEMANDA GENERADA:")
        print("-" * 60)
        print(texto_demanda[:500] + "..." if len(texto_demanda) > 500 else texto_demanda)
        print("-" * 60)
        
        print(f"\nüéØ BENEFICIOS DE LA INTEGRACI√ìN:")
        print(f"‚úÖ Toda la informaci√≥n de documentos se usa autom√°ticamente")
        print(f"‚úÖ Fechas espec√≠ficas se incluyen en los hechos")
        print(f"‚úÖ Montos exactos se citan en el petitorio")
        print(f"‚úÖ Empresas y personas se identifican correctamente")
        print(f"‚úÖ Transcripci√≥n completa sirve como evidencia")
        print(f"‚úÖ Demanda m√°s precisa y completa")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Error en ejemplo: {e}")
        return False

def mostrar_comparacion_prompts():
    """Muestra la comparaci√≥n entre el prompt anterior y el nuevo."""
    
    print("\nüìä COMPARACI√ìN: PROMPT ANTERIOR vs NUEVO")
    print("=" * 80)
    
    print("\nüî¥ PROMPT ANTERIOR (B√ÅSICO):")
    print("""
CLIENTE: ‚Ä¢ NOMBRE_COMPLETO: Juan P√©rez
TIPO: Despido injustificado
HECHOS: El cliente fue despedido sin causa aparente
NOTAS: Caso de despido injustificado

CONTEXTO LEGAL: [Casos similares de la base de datos]

Redacta una demanda completa siguiendo la estructura obligatoria.
    """)
    
    print("\nüü¢ PROMPT NUEVO (CON DOCUMENTOS):")
    print("""
CLIENTE: ‚Ä¢ NOMBRE_COMPLETO: Juan P√©rez
TIPO: Despido injustificado
HECHOS: El cliente fue despedido sin causa aparente
NOTAS: Caso con documentaci√≥n completa

CONTEXTO LEGAL: [Casos similares de la base de datos]

INFORMACI√ìN DE DOCUMENTOS SUBIDOS:
TRANSCRIPCI√ìN COMPLETA: [TODO el contenido de telegrama, liquidaci√≥n, recibo, carta documento]
PERSONAS IDENTIFICADAS: Juan P√©rez
EMPRESAS IDENTIFICADAS: EMPRESA XYZ S.A.
FECHAS IMPORTANTES: [15/03/2024, 16/03/2024, 01/01/2020, 10/03/2024]
MONTOS ENCONTRADOS: [$150.000, $450.000, $675.000, $132.000]
DATOS DE CONTACTO: [Tel√©fonos, emails, domicilios]

Redacta una demanda completa siguiendo la estructura obligatoria. 
Si hay informaci√≥n de documentos, √∫sala para enriquecer los hechos y el petitorio.
    """)
    
    print("\nüéØ MEJORAS IMPLEMENTADAS:")
    print("‚úÖ Transcripci√≥n completa de todos los documentos")
    print("‚úÖ Identificaci√≥n autom√°tica de personas y empresas")
    print("‚úÖ Extracci√≥n de fechas importantes")
    print("‚úÖ Montos exactos de liquidaciones y recibos")
    print("‚úÖ Datos de contacto encontrados")
    print("‚úÖ Instrucciones espec√≠ficas para usar la informaci√≥n")
    print("‚úÖ Integraci√≥n autom√°tica en hechos y petitorio")

async def main():
    """Funci√≥n principal del ejemplo."""
    
    print("üöÄ EJEMPLO PR√ÅCTICO: INTEGRACI√ìN COMPLETA DE DOCUMENTOS")
    print("=" * 80)
    
    # Mostrar comparaci√≥n de prompts
    mostrar_comparacion_prompts()
    
    # Ejecutar ejemplo completo
    print("\n" + "=" * 80)
    exito = await ejemplo_integracion_completa()
    
    print("\n" + "=" * 80)
    if exito:
        print("üéâ ¬°EJEMPLO COMPLETADO EXITOSAMENTE!")
        print("‚úÖ La integraci√≥n de documentos est√° funcionando perfectamente")
        print("‚úÖ El system prompt ahora usa TODA la informaci√≥n subida por el abogado")
    else:
        print("‚ö†Ô∏è El ejemplo tuvo algunos problemas")
        print("üîß Revisa los errores para identificar problemas")
    
    return exito

if __name__ == "__main__":
    # Ejecutar ejemplo
    try:
        exito = asyncio.run(main())
        sys.exit(0 if exito else 1)
    except KeyboardInterrupt:
        print("\n‚ö†Ô∏è Ejemplo interrumpido por el usuario")
        sys.exit(1)
    except Exception as e:
        print(f"\n‚ùå Error ejecutando ejemplo: {e}")
        sys.exit(1) 
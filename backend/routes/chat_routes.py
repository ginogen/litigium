from fastapi import APIRouter, HTTPException, Depends
from fastapi.responses import JSONResponse
from typing import Dict, List, Optional, Any
import uuid
from datetime import datetime
from pydantic import BaseModel, Field

import sys
import os
sys.path.append(os.path.join(os.path.dirname(__file__), '..', '..'))

from ..auth.dependencies import get_current_user
from ..models.user import User
from supabase_integration import (
    ChatService, 
    ChatSesionCreate,
    supabase,
    supabase_admin
)

# Importar el chat agent inteligente
try:
    from rag.chat_agent import get_chat_agent, reset_chat_agent
    CHAT_AGENT_AVAILABLE = True
    print("‚úÖ ChatAgent inteligente disponible")
    # Resetear la instancia para asegurar logs actuales
    reset_chat_agent()
    print("üîÑ ChatAgent reseteado para aplicar cambios")
except ImportError as e:
    print(f"‚ö†Ô∏è ChatAgent no disponible: {e}")
    CHAT_AGENT_AVAILABLE = False

router = APIRouter(prefix="/api/chat", tags=["chat"])

# Ya no necesitamos almacenamiento temporal - todo va a Supabase

# Modelos Pydantic
class DatosCliente(BaseModel):
    nombre_completo: str = Field(..., description="Nombre completo del cliente")
    dni: str = Field(..., description="DNI del cliente")
    domicilio: str = Field(..., description="Domicilio del cliente")
    telefono: Optional[str] = Field(None, description="Tel√©fono del cliente")
    email: Optional[str] = Field(None, description="Email del cliente")
    fecha_nacimiento: Optional[str] = Field(None, description="Fecha de nacimiento")
    estado_civil: Optional[str] = Field(None, description="Estado civil")
    ocupacion: Optional[str] = Field(None, description="Ocupaci√≥n")
    motivo_demanda: Optional[str] = Field(None, description="Motivo principal de la demanda")

class MensajeChat(BaseModel):
    session_id: str
    mensaje: str
    tipo: str = Field(default="user", description="Tipo de mensaje: user, bot, system")

class SolicitudDemanda(BaseModel):
    session_id: str
    tipo_demanda: str
    datos_cliente: DatosCliente
    hechos_adicionales: str = ""
    notas_abogado: str = ""

class RespuestaChat(BaseModel):
    session_id: str
    respuesta: str
    tipo: str
    timestamp: str
    opciones: Optional[List[str]] = None
    requiere_datos: Optional[bool] = False
    mostrar_descarga: Optional[bool] = False
    mostrar_preview: Optional[bool] = False
    mostrar_refrescar: Optional[bool] = False

async def obtener_sesion_con_abogado_id(session_id: str, abogado_id: str) -> Dict:
    """Obtiene una sesi√≥n espec√≠fica verificando que pertenezca al abogado."""
    try:
        print(f"üîç Buscando sesi√≥n - session_id: {session_id}, abogado_id: {abogado_id}")
        
        # Primero, listar todas las sesiones del abogado para debugging
        all_sessions = supabase_admin.table('chat_sesiones')\
            .select('session_id, id, titulo')\
            .eq('abogado_id', abogado_id)\
            .execute()
        
        print(f"üîç Sesiones disponibles del abogado: {len(all_sessions.data)} sesiones")
        for sesion in all_sessions.data:
            print(f"   - session_id: {sesion['session_id']}, id: {sesion['id']}, titulo: {sesion['titulo']}")
        
        response = supabase_admin.table('chat_sesiones')\
            .select('*')\
            .eq('session_id', session_id)\
            .eq('abogado_id', abogado_id)\
            .single()\
            .execute()
        
        if not response.data:
            raise HTTPException(status_code=404, detail="Sesi√≥n no encontrada")
        
        print(f"‚úÖ Sesi√≥n encontrada correctamente")
        return response.data
    except Exception as e:
        print(f"‚ùå Error en obtener_sesion_con_abogado_id: {str(e)}")
        if "No rows found" in str(e) or "0 rows" in str(e):
            raise HTTPException(status_code=404, detail="Sesi√≥n no encontrada")
        raise HTTPException(status_code=500, detail=f"Error obteniendo sesi√≥n: {str(e)}")

async def actualizar_datos_sesion(sesion_db_id: str, datos_cliente: Dict, tipo_demanda: str = None, hechos_adicionales: str = None):
    """Actualiza los datos de una sesi√≥n en la base de datos."""
    try:
        update_data = {
            "updated_at": datetime.now().isoformat()
        }
        
        if datos_cliente:
            update_data["cliente_datos"] = datos_cliente
            if datos_cliente.get("nombre_completo"):
                update_data["cliente_nombre"] = datos_cliente["nombre_completo"]
            if datos_cliente.get("dni"):
                update_data["cliente_dni"] = datos_cliente["dni"]
        
        if tipo_demanda:
            update_data["tipo_demanda"] = tipo_demanda
        
        if hechos_adicionales:
            update_data["hechos_adicionales"] = hechos_adicionales
        
        supabase_admin.table('chat_sesiones')\
            .update(update_data)\
            .eq('id', sesion_db_id)\
            .execute()
    except Exception as e:
        print(f"‚ùå Error actualizando sesi√≥n: {str(e)}")

def procesar_mensaje_inteligente(mensaje: str, datos_sesion: Dict) -> Dict:
    """Funci√≥n de procesamiento inteligente simplificada sin dependencias externas."""
    
    # Detectar tipos de demanda por palabras clave
    tipos_demanda = {
        "despido": "Despido injustificado",
        "accidente": "Accidente de trabajo", 
        "divorcio": "Divorcio contencioso",
        "da√±os": "Reclamo de da√±os y perjuicios",
        "blanco": "Empleados En Blanco",
        "negro": "Empleados En Negro",
        "licencia": "Demanda Licencia M√©dica",
        "solidaridad": "Demanda Solidaridad Laboral"
    }
    
    mensaje_lower = mensaje.lower()
    tipo_detectado = None
    
    # Detectar tipo de demanda
    for palabra, tipo in tipos_demanda.items():
        if palabra in mensaje_lower:
            tipo_detectado = tipo
            break
    
    # Detectar informaci√≥n del cliente b√°sica
    import re
    datos_detectados = {}
    
    # Detectar nombres (2-3 palabras que empiecen con may√∫scula)
    match_nombre = re.search(r'\b([A-Z√Å√â√ç√ì√ö√ë][a-z√°√©√≠√≥√∫√±]+(?:\s+[A-Z√Å√â√ç√ì√ö√ë][a-z√°√©√≠√≥√∫√±]+){1,3})\b', mensaje)
    if match_nombre and 'quiero' not in match_nombre.group(1).lower():
        datos_detectados["nombre_completo"] = match_nombre.group(1)
    
    # Detectar DNI (7-8 d√≠gitos)
    match_dni = re.search(r'\b(\d{7,8})\b', mensaje)
    if match_dni:
        datos_detectados["dni"] = match_dni.group(1)
    
    # Detectar direcciones b√°sicas
    match_direccion = re.search(r'\b((?:Paraguay|Rivadavia|Av\.|Avenida|Calle)\s+[^,\n]+?\s*\d+[^,\n]*)', mensaje, re.IGNORECASE)
    if match_direccion:
        datos_detectados["domicilio"] = match_direccion.group(1).strip()
    
    # Obtener datos existentes de la sesi√≥n
    datos_cliente_existentes = datos_sesion.get("cliente_datos", {})
    if isinstance(datos_cliente_existentes, str):
        import json
        try:
            datos_cliente_existentes = json.loads(datos_cliente_existentes)
        except:
            datos_cliente_existentes = {}
    
    # Actualizar datos con los nuevos detectados
    datos_cliente_actualizados = {**datos_cliente_existentes, **datos_detectados}
    
    # Detectar hechos relevantes
    hechos_keywords = []
    if "despid" in mensaje_lower:
        hechos_keywords.append("despido")
    if "sin causa" in mensaje_lower:
        hechos_keywords.append("sin causa justificada")
    if "licencia" in mensaje_lower:
        hechos_keywords.append("licencia m√©dica")
    if "empresa" in mensaje_lower:
        hechos_keywords.append("problemas laborales")
    
    hechos_adicionales = datos_sesion.get("hechos_adicionales", "")
    if hechos_keywords:
        hechos_texto = f"Cliente reporta: {', '.join(hechos_keywords)}. Contexto: {mensaje[:200]}"
        hechos_adicionales = hechos_texto
    
    # Determinar respuesta basada en informaci√≥n disponible
    tiene_nombre = bool(datos_cliente_actualizados.get("nombre_completo"))
    tiene_dni = bool(datos_cliente_actualizados.get("dni"))
    tiene_tipo = bool(tipo_detectado or datos_sesion.get("tipo_demanda"))
    tiene_hechos = bool(hechos_adicionales)
    
    # Retornar datos para actualizar la sesi√≥n
    respuesta = {
        "datos_cliente": datos_cliente_actualizados,
        "tipo_demanda": tipo_detectado or datos_sesion.get("tipo_demanda"),
        "hechos_adicionales": hechos_adicionales
    }
    
    if tiene_nombre and tiene_dni and tiene_tipo and tiene_hechos:
        respuesta["mensaje"] = f"‚úÖ **Informaci√≥n completa recibida**\n\n**Cliente:** {datos_cliente_actualizados.get('nombre_completo')}\n**DNI:** {datos_cliente_actualizados.get('dni')}\n**Tipo:** {respuesta['tipo_demanda']}\n**Situaci√≥n:** {hechos_keywords[0] if hechos_keywords else 'No especificada'}\n\n¬øDeseas que proceda a generar la demanda?\n\n*Nota: Funcionalidad completa disponible con configuraci√≥n de OpenAI*"
        respuesta["opciones"] = ["S√≠, generar demanda", "Agregar m√°s informaci√≥n", "Cambiar tipo de demanda"]
    elif tipo_detectado or datos_sesion.get("tipo_demanda"):
        info_faltante = []
        if not tiene_nombre:
            info_faltante.append("nombre completo del cliente")
        if not tiene_dni:
            info_faltante.append("DNI")
        if not tiene_hechos:
            info_faltante.append("detalles del caso")
        
        respuesta["mensaje"] = f"He detectado que necesitas ayuda con: **{respuesta['tipo_demanda']}**\n\nPara generar la demanda necesito:\n‚Ä¢ {chr(10).join(['‚Ä¢ ' + info for info in info_faltante])}\n\nPuedes proporcionarme toda la informaci√≥n junta."
    else:
        respuesta["mensaje"] = "¬°Hola! Soy tu asistente legal. Para ayudarte mejor, cu√©ntame:\n\n‚Ä¢ ¬øQu√© tipo de demanda necesitas?\n‚Ä¢ Datos del cliente (nombre, DNI, direcci√≥n)\n‚Ä¢ Detalles del caso\n\nPuedes escribir todo junto de forma natural.\n\n*Ejemplos:*\n- \"Despido injustificado, Juan P√©rez, DNI 12345678\"\n- \"Accidente laboral, necesito demanda\""
        respuesta["opciones"] = ["Despido injustificado", "Accidente de trabajo", "Divorcio", "Empleados en blanco", "Empleados en negro"]
    
    respuesta["mostrar_descarga"] = False
    respuesta["mostrar_preview"] = False
    respuesta["demanda_generada"] = False
    
    return respuesta

@router.post("/iniciar")
async def iniciar_chat(current_user: User = Depends(get_current_user)):
    """Inicia una nueva sesi√≥n de chat en Supabase."""
    try:
        print(f"üîç Iniciando chat para usuario: {current_user.id if current_user else 'None'}")
        
        # VERIFICAR CATEGOR√çAS PRIMERO
        print("üîç Verificando categor√≠as disponibles...")
        try:
            from core.category_manager import CategoryManager
            category_manager = CategoryManager()
            
            # Obtener categor√≠as del usuario
            categorias = category_manager.get_user_categories(current_user.id)
            print(f"üìä Categor√≠as encontradas: {len(categorias)}")
            
            if not categorias:
                raise HTTPException(
                    status_code=400,
                    detail="No tienes categor√≠as creadas. Ve a 'Entrenar' ‚Üí 'Gestionar Categor√≠as' para crear al menos una categor√≠a."
                )
            
            # Verificar si hay categor√≠as con documentos procesados
            stats = category_manager.get_category_statistics(current_user.id)
            categorias_con_documentos = [s for s in stats['categories'] if s['documentos_procesados'] > 0]
            
            print(f"üìã Categor√≠as con documentos procesados: {len(categorias_con_documentos)}")
            
            if not categorias_con_documentos:
                nombres_categorias = [c['nombre'] for c in categorias]
                raise HTTPException(
                    status_code=400,
                    detail=f"Tienes {len(categorias)} categor√≠as ({', '.join(nombres_categorias)}) pero ninguna tiene documentos procesados. Ve a 'Entrenar' para subir documentos primero."
                )
            
            print(f"‚úÖ Categor√≠as v√°lidas para chat: {[c['nombre'] for c in categorias_con_documentos]}")
            
        except HTTPException:
            raise
        except Exception as e:
            print(f"‚ùå Error verificando categor√≠as: {str(e)}")
            raise HTTPException(
                status_code=500,
                detail=f"Error verificando categor√≠as: {str(e)}"
            )
        
        # Obtener el perfil del abogado
        print("üîç Buscando perfil de abogado...")
        try:
            abogado_response = supabase_admin.table('abogados')\
                .select('*')\
                .eq('user_id', current_user.id)\
                .single()\
                .execute()
            
            if not abogado_response.data:
                raise HTTPException(
                    status_code=404, 
                    detail="Perfil de abogado no encontrado. Completa tu perfil primero."
                )
            
            abogado_id = abogado_response.data['id']
            print(f"‚úÖ Perfil encontrado: {abogado_id}")
            
        except Exception as db_error:
            print(f"‚ùå Error consultando abogado: {str(db_error)}")
            print("üîç Creando perfil temporal...")
            # Si no existe perfil, crear uno temporal
            temp_abogado = {
                'id': str(uuid.uuid4()),
                'user_id': current_user.id,
                'nombre_completo': current_user.email.split('@')[0],
                'matricula_profesional': 'TEMP-001',
                'email': current_user.email,
                'activo': True
            }
            
            try:
                create_response = supabase_admin.table('abogados')\
                    .insert(temp_abogado)\
                    .execute()
                
                abogado_id = create_response.data[0]['id']
                print(f"‚úÖ Perfil temporal creado para {current_user.email}: {abogado_id}")
                
            except Exception as create_error:
                print(f"‚ùå Error creando perfil temporal: {str(create_error)}")
                raise HTTPException(
                    status_code=500,
                    detail=f"Error accediendo al perfil de abogado: {str(create_error)}"
                )
        
        session_id = str(uuid.uuid4())
        print(f"üîç Generando session_id: {session_id}")
        
        # Crear sesi√≥n en Supabase
        print("üîç Creando sesi√≥n en Supabase...")
        datos_sesion = ChatSesionCreate(
            titulo=f"Chat {datetime.now().strftime('%d/%m/%Y %H:%M')}",
            tipo_demanda=None,
            carpeta_id=None,
            cliente_nombre=None,
            cliente_dni=None
        )
        
        sesion = await ChatService.crear_sesion(abogado_id, session_id, datos_sesion)
        print(f"‚úÖ Sesi√≥n creada en DB: {sesion.get('id', 'N/A')}")
        
        print(f"‚úÖ Nueva sesi√≥n creada: {session_id}")
        
        response_data = {
            "success": True,
            "session_id": session_id,
            "mensaje": session_id,  # El frontend maneja el mensaje de bienvenida
            "sesion_db": sesion
        }
        print(f"üîç Retornando respuesta: {response_data}")
        
        return response_data
        
    except Exception as e:
        import traceback
        error_detail = str(e) if str(e) else "Error desconocido"
        error_traceback = traceback.format_exc()
        
        print(f"‚ùå Error iniciando chat: {error_detail}")
        print(f"‚ùå Traceback completo: {error_traceback}")
        
        raise HTTPException(
            status_code=500,
            detail=f"Error iniciando chat: {error_detail} | Type: {type(e).__name__}"
        )

@router.post("/mensaje")
async def procesar_mensaje(
    mensaje: MensajeChat,
    current_user: User = Depends(get_current_user)
):
    """Procesa un mensaje en el chat y guarda en Supabase."""
    try:
        print(f"üîç Procesando mensaje para usuario: {current_user.id}")
        print(f"üîç Session ID: {mensaje.session_id}")
        print(f"üîç Mensaje: {mensaje.mensaje[:100]}...")
        
        # Obtener el perfil del abogado
        print("üîç Buscando perfil de abogado para mensaje...")
        abogado_response = supabase_admin.table('abogados')\
            .select('*')\
            .eq('user_id', current_user.id)\
            .single()\
            .execute()
        
        if not abogado_response.data:
            raise HTTPException(status_code=404, detail="Perfil de abogado no encontrado")
        
        abogado_id = abogado_response.data['id']
        print(f"‚úÖ Perfil encontrado para mensaje: {abogado_id}")
        
        # Obtener sesi√≥n de la base de datos
        print("üîç Obteniendo sesi√≥n de la base de datos...")
        sesion = await obtener_sesion_con_abogado_id(mensaje.session_id, abogado_id)
        print(f"‚úÖ Sesi√≥n encontrada: {sesion.get('id', 'N/A')}")
        
        # Guardar mensaje del usuario en Supabase
        print("üîç Guardando mensaje del usuario...")
        await ChatService.guardar_mensaje(
            sesion_id=sesion['id'],  # UUID de la sesi√≥n en DB
            tipo="user",
            mensaje=mensaje.mensaje,
            metadata={"timestamp": datetime.now().isoformat()}
        )
        
        print(f"‚úÖ Mensaje de usuario guardado: {mensaje.mensaje[:50]}...")
        
        # Detectar si es un mensaje de edici√≥n con contexto O una modificaci√≥n global
        es_edicion = (
            mensaje.mensaje.startswith("Modificar el siguiente texto:") or 
            mensaje.mensaje.startswith("[Error editando]") or
            mensaje.mensaje.startswith("GLOBAL:")
        )
        
        if es_edicion:
            # Verificar si es un mensaje de error de edici√≥n
            if mensaje.mensaje.startswith("[Error editando]"):
                print("üö® Detectado mensaje de error de edici√≥n - NO procesar como consulta normal")
                # Extraer el error espec√≠fico del mensaje
                error_msg = mensaje.mensaje.replace("[Error editando]", "").strip()
                
                respuesta_data = {
                    "mensaje": f"‚ùå **Error en la edici√≥n**\n\n{error_msg}\n\nüí° **Sugerencias:**\n- Aseg√∫rate de que existe un documento generado\n- Verifica que el texto a modificar est√© en el documento\n- Intenta con una instrucci√≥n m√°s espec√≠fica\n- Si el problema persiste, prueba regenerar el documento",
                    "datos_cliente": sesion.get('cliente_datos', {}),
                    "tipo_demanda": sesion.get('tipo_demanda', ''),
                    "hechos_adicionales": sesion.get('hechos_adicionales', '')
                }
                print(f"‚ùå Error de edici√≥n procesado sin generar nueva demanda")
                
            elif mensaje.mensaje.startswith("GLOBAL:"):
                print("üåç Detectada solicitud de modificaci√≥n global...")
                try:
                    instruccion_global = mensaje.mensaje.replace("GLOBAL:", "").strip()
                    
                    from rag.editor_demandas import procesar_edicion_global
                    
                    print(f"üéØ [CHAT] Procesando edici√≥n global:")
                    print(f"   üí≠ Instrucci√≥n: '{instruccion_global}'")
                    
                    resultado = procesar_edicion_global(instruccion_global, mensaje.session_id)
                    
                    if resultado.get('exito'):
                        respuesta_data = {
                            "mensaje": f"‚úÖ Modificaci√≥n global aplicada exitosamente.\n\n{resultado.get('mensaje', '')}",
                            "mostrar_preview": True,
                            "mostrar_descarga": True,
                            "datos_cliente": sesion.get('cliente_datos', {}),
                            "tipo_demanda": sesion.get('tipo_demanda', ''),
                            "hechos_adicionales": sesion.get('hechos_adicionales', '')
                        }
                        print(f"‚úÖ Modificaci√≥n global procesada exitosamente")
                    else:
                        respuesta_data = {
                            "mensaje": f"‚ùå No se pudo aplicar la modificaci√≥n global: {resultado.get('error', 'Error desconocido')}",
                            "datos_cliente": sesion.get('cliente_datos', {}),
                            "tipo_demanda": sesion.get('tipo_demanda', ''),
                            "hechos_adicionales": sesion.get('hechos_adicionales', '')
                        }
                        print(f"‚ùå Error en modificaci√≥n global: {resultado.get('error')}")
                        
                except Exception as e:
                    print(f"‚ö†Ô∏è Error procesando modificaci√≥n global: {e}")
                    respuesta_data = {
                        "mensaje": f"‚ùå **Error en modificaci√≥n global**\n\nNo se pudo procesar: {str(e)}\n\nüí° **Sugerencias:**\n- Aseg√∫rate de que existe un documento generado\n- Verifica que el texto a modificar existe en el documento\n- Intenta con una instrucci√≥n m√°s espec√≠fica",
                        "datos_cliente": sesion.get('cliente_datos', {}),
                        "tipo_demanda": sesion.get('tipo_demanda', ''),
                        "hechos_adicionales": sesion.get('hechos_adicionales', '')
                    }
                    
            else:
                print("üîç Detectada solicitud de edici√≥n v√°lida, procesando con EditorDemandas...")
                try:
                    # Extraer el texto a modificar y la instrucci√≥n
                    lineas = mensaje.mensaje.split('\n')
                    texto_a_modificar = ""
                    instruccion = ""
                    
                    for i, linea in enumerate(lineas):
                        if linea.startswith("Modificar el siguiente texto:"):
                            # Extraer texto entre comillas
                            import re
                            match = re.search(r'"([^"]*)"', linea)
                            if match:
                                texto_a_modificar = match.group(1)
                        elif linea.startswith("Instrucci√≥n:"):
                            instruccion = linea.replace("Instrucci√≥n:", "").strip()
                    
                    if texto_a_modificar and instruccion:
                        # Usar EditorDemandas para procesar la edici√≥n contextual
                        from rag.editor_demandas import procesar_edicion_contextual
                        
                        print(f"üéØ [CHAT] Procesando edici√≥n contextual:")
                        print(f"   üìù Texto: '{texto_a_modificar}'")
                        print(f"   üí≠ Instrucci√≥n: '{instruccion}'")
                        
                        # Usar la funci√≥n correcta para edici√≥n contextual
                        resultado = procesar_edicion_contextual(texto_a_modificar, instruccion, mensaje.session_id)
                        
                        if resultado.get('exito'):
                            respuesta_data = {
                                "mensaje": f"‚úÖ Edici√≥n aplicada exitosamente.\n\n{resultado.get('mensaje', '')}",
                                "mostrar_preview": True,  # Mostrar preview actualizado
                                "mostrar_descarga": True,
                                "datos_cliente": sesion.get('cliente_datos', {}),
                                "tipo_demanda": sesion.get('tipo_demanda', ''),
                                "hechos_adicionales": sesion.get('hechos_adicionales', '')
                            }
                            print(f"‚úÖ Edici√≥n procesada exitosamente con EditorDemandas")
                        else:
                            respuesta_data = {
                                "mensaje": f"‚ùå No se pudo aplicar la edici√≥n: {resultado.get('error', 'Error desconocido')}",
                                "datos_cliente": sesion.get('cliente_datos', {}),
                                "tipo_demanda": sesion.get('tipo_demanda', ''),
                                "hechos_adicionales": sesion.get('hechos_adicionales', '')
                            }
                            print(f"‚ùå Error en EditorDemandas: {resultado.get('error')}")
                    else:
                        raise Exception("No se pudo extraer texto a modificar o instrucci√≥n")
                        
                except Exception as e:
                    print(f"‚ö†Ô∏è Error procesando edici√≥n: {e}")
                    
                    # NO hacer fallback al ChatAgent para ediciones fallidas
                    # Las ediciones NUNCA deben generar nuevas demandas
                    respuesta_data = {
                        "mensaje": f"‚ùå **Error en la edici√≥n**\n\nNo se pudo procesar la edici√≥n solicitada: {str(e)}\n\nüí° **Sugerencias:**\n- Aseg√∫rate de que existe un documento generado\n- Verifica que el texto a modificar est√© en el documento\n- Intenta con una instrucci√≥n m√°s espec√≠fica",
                        "datos_cliente": sesion.get('cliente_datos', {}),
                        "tipo_demanda": sesion.get('tipo_demanda', ''),
                        "hechos_adicionales": sesion.get('hechos_adicionales', '')
                    }
                    print(f"‚ùå Error de edici√≥n manejado sin generar nueva demanda")
                    
                    # Marcar que NO debe procesar como mensaje normal
                    es_edicion = True  # Mantener como edici√≥n fallida, no procesar como nuevo mensaje
        
        if not es_edicion:
            # Procesar mensaje con ChatAgent inteligente o funci√≥n b√°sica
            print("üîç Procesando mensaje con IA...")
            
            if CHAT_AGENT_AVAILABLE:
                try:
                    chat_agent = get_chat_agent()
                    if not chat_agent:
                        raise Exception("ChatAgent no pudo inicializarse - verifique OPENAI_API_KEY")
                    
                    # Adaptar estructura de sesi√≥n para ChatAgent
                    sesion_adaptada = {
                        'datos_cliente': sesion.get('cliente_datos', {}) if isinstance(sesion.get('cliente_datos'), dict) else {},
                        'tipo_demanda': sesion.get('tipo_demanda', ''),
                        'hechos_adicionales': sesion.get('hechos_adicionales', ''),
                        'notas_abogado': sesion.get('notas_abogado', ''),
                        'estado': 'conversando',
                        'user_id': current_user.id  # NUEVO: Pasar user_id para contexto enriquecido
                    }
                    
                    # Procesar datos JSON si es string
                    if isinstance(sesion.get('cliente_datos'), str):
                        import json
                        try:
                            sesion_adaptada['datos_cliente'] = json.loads(sesion.get('cliente_datos', '{}'))
                        except:
                            sesion_adaptada['datos_cliente'] = {}
                    
                    print(f"ü§ñ Usando ChatAgent inteligente con OpenAI")
                    respuesta_ia = chat_agent.procesar_mensaje(sesion_adaptada, mensaje.mensaje, mensaje.session_id)
                    
                    # Validar que la respuesta de la IA sea v√°lida
                    if not respuesta_ia or not isinstance(respuesta_ia, dict):
                        raise Exception(f"ChatAgent devolvi√≥ respuesta inv√°lida: {type(respuesta_ia)}")
                    
                    # Convertir respuesta del ChatAgent al formato esperado
                    respuesta_data = {
                        "mensaje": respuesta_ia.get("mensaje", "¬øEn qu√© puedo ayudarte?"),
                        "opciones": respuesta_ia.get("opciones"),
                        "mostrar_descarga": respuesta_ia.get("demanda_generada", False),
                        "mostrar_preview": respuesta_ia.get("demanda_generada", False),
                        "datos_cliente": sesion_adaptada.get('datos_cliente', {}),
                        "tipo_demanda": sesion_adaptada.get('tipo_demanda', ''),
                        "hechos_adicionales": sesion_adaptada.get('hechos_adicionales', '')
                    }
                    
                    print(f"‚úÖ Respuesta IA generada con OpenAI: ChatAgent procesado exitosamente")
                except Exception as e:
                    print(f"‚ö†Ô∏è Error con ChatAgent, usando fallback: {e}")
                    respuesta_data = procesar_mensaje_inteligente(mensaje.mensaje, sesion)
                    print(f"‚úÖ Respuesta fallback generada: {len(respuesta_data)} items")
            else:
                # Usar funci√≥n b√°sica si ChatAgent no est√° disponible
                respuesta_data = procesar_mensaje_inteligente(mensaje.mensaje, sesion)
                print(f"‚úÖ Respuesta b√°sica generada: {len(respuesta_data)} items")
        
        respuesta_bot = respuesta_data.get("mensaje", "¬øEn qu√© puedo ayudarte?")
        opciones = respuesta_data.get("opciones")
        print(f"üîç Respuesta bot: {respuesta_bot[:50]}...")
        
        # Actualizar datos de la sesi√≥n si se detectaron cambios
        if respuesta_data.get("datos_cliente") or respuesta_data.get("tipo_demanda") or respuesta_data.get("hechos_adicionales"):
            await actualizar_datos_sesion(
                sesion['id'],
                respuesta_data.get("datos_cliente"),
                respuesta_data.get("tipo_demanda"),
                respuesta_data.get("hechos_adicionales")
            )
        
        # Guardar respuesta del bot en Supabase
        print("üîç Guardando respuesta del bot...")
        await ChatService.guardar_mensaje(
            sesion_id=sesion['id'],  # UUID de la sesi√≥n en DB
            tipo="bot",
            mensaje=respuesta_bot,
            metadata={
                "timestamp": datetime.now().isoformat(),
                "opciones": opciones,
                "mostrar_descarga": respuesta_data.get("mostrar_descarga", False),
                "mostrar_preview": respuesta_data.get("mostrar_preview", False)
            }
        )
        
        print(f"‚úÖ Respuesta del bot guardada: {respuesta_bot[:50]}...")
        
        return {
            "success": True,
            "session_id": mensaje.session_id,
            "respuesta": respuesta_bot,
            "tipo": "bot",
            "timestamp": datetime.now().isoformat(),
            "opciones": opciones,
            "mostrar_descarga": respuesta_data.get("mostrar_descarga", False),
            "mostrar_preview": respuesta_data.get("mostrar_preview", False)
        }
        
    except HTTPException as e:
        print(f"‚ùå HTTPException en mensaje: {e.detail}")
        raise e
    except Exception as e:
        import traceback
        error_detail = str(e) if str(e) else "Error desconocido"
        error_traceback = traceback.format_exc()
        
        print(f"‚ùå Error procesando mensaje: {error_detail}")
        print(f"‚ùå Traceback completo: {error_traceback}")
        
        raise HTTPException(
            status_code=500,
            detail=f"Error procesando mensaje: {error_detail} | Type: {type(e).__name__}"
        )

@router.get("/mensajes/{session_id}")
async def obtener_mensajes(
    session_id: str,
    current_user: User = Depends(get_current_user)
):
    """Obtiene todos los mensajes de una sesi√≥n espec√≠fica."""
    try:
        print(f"üîç Obteniendo mensajes para session_id: {session_id}")
        
        # Obtener el perfil del abogado
        abogado_response = supabase_admin.table('abogados')\
            .select('*')\
            .eq('user_id', current_user.id)\
            .single()\
            .execute()
        
        if not abogado_response.data:
            print(f"‚ùå Perfil de abogado no encontrado para user_id: {current_user.id}")
            raise HTTPException(status_code=404, detail="Perfil de abogado no encontrado")
        
        abogado_id = abogado_response.data['id']
        print(f"‚úÖ Perfil encontrado: {abogado_id}")
        
        # Obtener sesi√≥n de la base de datos
        sesion = await obtener_sesion_con_abogado_id(session_id, abogado_id)
        print(f"‚úÖ Sesi√≥n encontrada: {sesion.get('id', 'N/A')}")
        
        # Obtener mensajes de la sesi√≥n usando el ID interno de la sesi√≥n
        print(f"üîç Buscando mensajes para sesion DB ID: {sesion['id']}")
        mensajes_response = supabase_admin.table('chat_mensajes')\
            .select('*')\
            .eq('sesion_id', sesion['id'])\
            .order('created_at', desc=False)\
            .execute()
        
        mensajes = mensajes_response.data or []
        print(f"‚úÖ Mensajes encontrados: {len(mensajes)}")
        
        # Debug: mostrar algunos mensajes
        for i, msg in enumerate(mensajes[:3]):
            print(f"  {i+1}. {msg.get('tipo', 'N/A')}: {msg.get('mensaje', 'N/A')[:50]}...")
        
        return {
            "success": True,
            "session_id": session_id,
            "mensajes": mensajes,
            "sesion_info": sesion
        }
        
    except HTTPException as e:
        print(f"‚ùå HTTPException en obtener_mensajes: {e.detail}")
        raise e
    except Exception as e:
        import traceback
        error_detail = str(e) if str(e) else "Error desconocido"
        error_traceback = traceback.format_exc()
        
        print(f"‚ùå Error obteniendo mensajes: {error_detail}")
        print(f"‚ùå Traceback completo: {error_traceback}")
        
        raise HTTPException(
            status_code=500,
            detail=f"Error obteniendo mensajes: {error_detail}"
        )

@router.post("/generar-demanda")
async def generar_demanda_endpoint(
    solicitud: SolicitudDemanda,
    current_user: User = Depends(get_current_user)
):
    """Genera una demanda con datos completos del cliente."""
    try:
        # Obtener el perfil del abogado
        abogado_response = supabase_admin.table('abogados')\
            .select('*')\
            .eq('user_id', current_user.id)\
            .single()\
            .execute()
        
        if not abogado_response.data:
            raise HTTPException(status_code=404, detail="Perfil de abogado no encontrado")
        
        abogado_id = abogado_response.data['id']
        
        # Obtener sesi√≥n de la base de datos
        sesion = await obtener_sesion_con_abogado_id(solicitud.session_id, abogado_id)

        # Actualizar datos de la sesi√≥n en Supabase
        await actualizar_datos_sesion(
            sesion['id'],
            solicitud.datos_cliente.dict(),
            solicitud.tipo_demanda,
            solicitud.hechos_adicionales
        )

        # Generar demanda usando IA si est√° disponible
        if CHAT_AGENT_AVAILABLE:
            try:
                from rag.qa_agent import generar_demanda
                
                print(f"üîÑ Generando demanda con IA para {solicitud.datos_cliente.nombre_completo}")
                
                resultado_demanda = generar_demanda(
                    tipo_demanda=solicitud.tipo_demanda,
                    datos_cliente=solicitud.datos_cliente.dict(),
                    hechos_adicionales=solicitud.hechos_adicionales,
                    notas_abogado=solicitud.notas_abogado,
                    user_id=current_user.id  # NUEVO: Pasar user_id para contexto enriquecido
                )
                
                if resultado_demanda.get("success"):
                    respuesta = f"""‚úÖ **Demanda generada exitosamente con IA**

**Cliente:** {solicitud.datos_cliente.nombre_completo}
**DNI:** {solicitud.datos_cliente.dni}
**Tipo:** {solicitud.tipo_demanda}

üéØ **Demanda creada usando:**
‚Ä¢ Base de datos de casos similares
‚Ä¢ Jurisprudencia actualizada
‚Ä¢ Plantillas profesionales optimizadas

üìÑ La demanda incluye todas las secciones legales requeridas y est√° lista para presentar.

**Opciones disponibles:**
üîç **Vista previa** - Revisar antes de descargar
üì• **Descargar** - Obtener archivo Word
üîÑ **Regenerar** - Crear nueva versi√≥n"""
                    
                    # Marcar que la demanda fue generada exitosamente
                    mostrar_descarga = True
                    mostrar_preview = True
                else:
                    respuesta = f"""‚ö†Ô∏è **Error generando demanda con IA**

{resultado_demanda.get('error', 'Error desconocido')}

**Datos recibidos:**
‚Ä¢ Cliente: {solicitud.datos_cliente.nombre_completo}
‚Ä¢ DNI: {solicitud.datos_cliente.dni}
‚Ä¢ Tipo: {solicitud.tipo_demanda}

*Reintentando con m√©todo b√°sico...*"""
                    mostrar_descarga = False
                    mostrar_preview = False
                    
            except Exception as e:
                print(f"‚ùå Error generando demanda con IA: {e}")
                respuesta = f"""‚ö†Ô∏è **Sistema de IA temporalmente no disponible**
                
**Datos recibidos correctamente:**
‚Ä¢ Cliente: {solicitud.datos_cliente.nombre_completo}
‚Ä¢ DNI: {solicitud.datos_cliente.dni}
‚Ä¢ Domicilio: {solicitud.datos_cliente.domicilio}
‚Ä¢ Tipo: {solicitud.tipo_demanda}

Los datos se han guardado y podr√°s generar la demanda cuando el sistema est√© disponible."""
                mostrar_descarga = False
                mostrar_preview = False
        else:
            # Respuesta b√°sica si no hay IA disponible
            respuesta = f"""‚úÖ **Datos recibidos correctamente:**
            
**Cliente:** {solicitud.datos_cliente.nombre_completo}
**DNI:** {solicitud.datos_cliente.dni}
**Domicilio:** {solicitud.datos_cliente.domicilio}
**Tipo de demanda:** {solicitud.tipo_demanda}

*Nota: Configure OpenAI API para activar generaci√≥n autom√°tica de demandas.*"""
            mostrar_descarga = False
            mostrar_preview = False

        # Guardar mensaje de confirmaci√≥n en Supabase
        await ChatService.guardar_mensaje(
            sesion_id=sesion['id'],
            tipo="system",
            mensaje=respuesta,
            metadata={
                "timestamp": datetime.now().isoformat(),
                "tipo_accion": "generacion_demanda",
                "datos_cliente": solicitud.datos_cliente.dict()
            }
        )

        return {
            "success": True,
            "respuesta": respuesta,
            "demanda_generada": mostrar_descarga,
            "mostrar_descarga": mostrar_descarga,
            "mostrar_preview": mostrar_preview,
            "timestamp": datetime.now().isoformat()
        }

    except Exception as e:
        raise HTTPException(
            status_code=500,
            detail=f"Error generando demanda: {str(e)}"
        )

@router.get("/tipos-demanda")
async def obtener_tipos():
    """Obtiene los tipos de demanda disponibles."""
    tipos = [
        "Despido injustificado",
        "Accidente de trabajo",
        "Divorcio contencioso", 
        "Reclamo de da√±os y perjuicios",
        "Empleados En Blanco",
        "Empleados En Negro",
        "Demanda Licencia M√©dica",
        "Demanda Solidaridad Laboral"
    ]
    return {"tipos": tipos}

@router.get("/sesion/{session_id}")
async def obtener_sesion(
    session_id: str,
    current_user: User = Depends(get_current_user)
):
    """Obtiene informaci√≥n de una sesi√≥n espec√≠fica."""
    try:
        # Obtener el perfil del abogado
        abogado_response = supabase_admin.table('abogados')\
            .select('*')\
            .eq('user_id', current_user.id)\
            .single()\
            .execute()
        
        if not abogado_response.data:
            raise HTTPException(status_code=404, detail="Perfil de abogado no encontrado")
        
        abogado_id = abogado_response.data['id']
        
        # Obtener sesi√≥n de la base de datos
        sesion = await obtener_sesion_con_abogado_id(session_id, abogado_id)
        
        return {
            "success": True,
            "session": sesion
        }
        
    except HTTPException as e:
        raise e
    except Exception as e:
        print(f"‚ùå Error obteniendo sesi√≥n: {str(e)}")
        raise HTTPException(
            status_code=500,
            detail=f"Error obteniendo sesi√≥n: {str(e)}"
        )

@router.put("/sesion/{session_id}")
async def actualizar_sesion(
    session_id: str,
    datos: dict,
    current_user: User = Depends(get_current_user)
):
    """Actualiza informaci√≥n de una sesi√≥n espec√≠fica."""
    try:
        # Obtener el perfil del abogado
        abogado_response = supabase_admin.table('abogados')\
            .select('*')\
            .eq('user_id', current_user.id)\
            .single()\
            .execute()
        
        if not abogado_response.data:
            raise HTTPException(status_code=404, detail="Perfil de abogado no encontrado")
        
        abogado_id = abogado_response.data['id']
        
        # Obtener sesi√≥n de la base de datos para verificar permisos
        sesion = await obtener_sesion_con_abogado_id(session_id, abogado_id)
        
        # Actualizar sesi√≥n
        update_data = {
            **datos,
            "updated_at": datetime.now().isoformat()
        }
        
        response = supabase_admin.table('chat_sesiones')\
            .update(update_data)\
            .eq('id', sesion['id'])\
            .execute()
        
        return {
            "success": True,
            "message": "Sesi√≥n actualizada exitosamente",
            "session": response.data[0] if response.data else None
        }
        
    except HTTPException as e:
        raise e
    except Exception as e:
        print(f"‚ùå Error actualizando sesi√≥n: {str(e)}")
        raise HTTPException(
            status_code=500,
            detail=f"Error actualizando sesi√≥n: {str(e)}"
        )

@router.delete("/sesion/{session_id}")
async def eliminar_sesion(
    session_id: str,
    current_user: User = Depends(get_current_user)
):
    """Elimina una sesi√≥n espec√≠fica y todos sus mensajes."""
    try:
        print(f"üóëÔ∏è Eliminando sesi√≥n: {session_id}")
        
        # Obtener el perfil del abogado
        abogado_response = supabase_admin.table('abogados')\
            .select('*')\
            .eq('user_id', current_user.id)\
            .single()\
            .execute()
        
        if not abogado_response.data:
            raise HTTPException(status_code=404, detail="Perfil de abogado no encontrado")
        
        abogado_id = abogado_response.data['id']
        
        # Obtener sesi√≥n de la base de datos para verificar permisos
        sesion = await obtener_sesion_con_abogado_id(session_id, abogado_id)
        
        # Eliminar mensajes de la sesi√≥n primero
        supabase_admin.table('chat_mensajes')\
            .delete()\
            .eq('sesion_id', sesion['id'])\
            .execute()
        
        # Eliminar demandas generadas asociadas
        supabase_admin.table('demandas_generadas')\
            .delete()\
            .eq('sesion_id', sesion['id'])\
            .execute()
        
        # Eliminar la sesi√≥n
        supabase_admin.table('chat_sesiones')\
            .delete()\
            .eq('id', sesion['id'])\
            .execute()
        
        print(f"‚úÖ Sesi√≥n eliminada exitosamente: {session_id}")
        
        return {
            "success": True,
            "message": "Conversaci√≥n eliminada exitosamente"
        }
        
    except HTTPException as e:
        raise e
    except Exception as e:
        print(f"‚ùå Error eliminando sesi√≥n: {str(e)}")
        raise HTTPException(
            status_code=500,
            detail=f"Error eliminando sesi√≥n: {str(e)}"
        )

@router.put("/sesion/{session_id}/mover")
async def mover_sesion_a_carpeta(
    session_id: str,
    data: dict,
    current_user: User = Depends(get_current_user)
):
    """Mueve una sesi√≥n a otra carpeta."""
    try:
        carpeta_id = data.get('carpeta_id')  # Puede ser None para "sin carpeta"
        print(f"üìÅ Moviendo sesi√≥n {session_id} a carpeta: {carpeta_id or 'Sin carpeta'}")
        
        # Obtener el perfil del abogado
        abogado_response = supabase_admin.table('abogados')\
            .select('*')\
            .eq('user_id', current_user.id)\
            .single()\
            .execute()
        
        if not abogado_response.data:
            raise HTTPException(status_code=404, detail="Perfil de abogado no encontrado")
        
        abogado_id = abogado_response.data['id']
        
        # Verificar que la sesi√≥n existe y pertenece al abogado
        sesion = await obtener_sesion_con_abogado_id(session_id, abogado_id)
        
        # Si se especifica una carpeta, verificar que existe y pertenece al abogado
        if carpeta_id:
            carpeta_response = supabase_admin.table('carpetas')\
                .select('id')\
                .eq('id', carpeta_id)\
                .eq('abogado_id', abogado_id)\
                .single()\
                .execute()
            
            if not carpeta_response.data:
                raise HTTPException(status_code=404, detail="Carpeta no encontrada")
        
        # Actualizar la sesi√≥n
        response = supabase_admin.table('chat_sesiones')\
            .update({
                'carpeta_id': carpeta_id,
                'updated_at': datetime.now().isoformat()
            })\
            .eq('id', sesion['id'])\
            .execute()
        
        destination = carpeta_id or "Sin carpeta"
        print(f"‚úÖ Sesi√≥n movida exitosamente a: {destination}")
        
        return {
            "success": True,
            "message": f"Conversaci√≥n movida exitosamente",
            "session": response.data[0] if response.data else None
        }
        
    except HTTPException as e:
        raise e
    except Exception as e:
        print(f"‚ùå Error moviendo sesi√≥n: {str(e)}")
        raise HTTPException(
            status_code=500,
            detail=f"Error moviendo sesi√≥n: {str(e)}"
        )

@router.delete("/sesiones/bulk")
async def eliminar_sesiones_masivo(
    data: dict,
    current_user: User = Depends(get_current_user)
):
    """Elimina m√∫ltiples sesiones de una vez."""
    try:
        session_ids = data.get('session_ids', [])
        if not session_ids:
            raise HTTPException(status_code=400, detail="No se proporcionaron sesiones para eliminar")
        
        print(f"üóëÔ∏è Eliminaci√≥n masiva: {len(session_ids)} sesiones")
        
        # Obtener el perfil del abogado
        abogado_response = supabase_admin.table('abogados')\
            .select('*')\
            .eq('user_id', current_user.id)\
            .single()\
            .execute()
        
        if not abogado_response.data:
            raise HTTPException(status_code=404, detail="Perfil de abogado no encontrado")
        
        abogado_id = abogado_response.data['id']
        
        deleted_count = 0
        errors = []
        
        for session_id in session_ids:
            try:
                # Verificar que la sesi√≥n pertenece al abogado
                sesion = await obtener_sesion_con_abogado_id(session_id, abogado_id)
                
                # Eliminar mensajes de la sesi√≥n
                supabase_admin.table('chat_mensajes')\
                    .delete()\
                    .eq('sesion_id', sesion['id'])\
                    .execute()
                
                # Eliminar demandas generadas asociadas
                supabase_admin.table('demandas_generadas')\
                    .delete()\
                    .eq('sesion_id', sesion['id'])\
                    .execute()
                
                # Eliminar la sesi√≥n
                supabase_admin.table('chat_sesiones')\
                    .delete()\
                    .eq('id', sesion['id'])\
                    .execute()
                
                deleted_count += 1
                print(f"‚úÖ Sesi√≥n eliminada: {session_id}")
                
            except Exception as e:
                error_msg = f"Error eliminando {session_id}: {str(e)}"
                errors.append(error_msg)
                print(f"‚ùå {error_msg}")
        
        print(f"‚úÖ Eliminaci√≥n masiva completada: {deleted_count} eliminadas, {len(errors)} errores")
        
        return {
            "success": True,
            "message": f"{deleted_count} conversaciones eliminadas exitosamente",
            "deleted_count": deleted_count,
            "errors": errors
        }
        
    except HTTPException as e:
        raise e
    except Exception as e:
        print(f"‚ùå Error en eliminaci√≥n masiva: {str(e)}")
        raise HTTPException(
            status_code=500,
            detail=f"Error en eliminaci√≥n masiva: {str(e)}"
        )

@router.get("/verificar-categorias")
async def verificar_categorias_disponibles(
    current_user: User = Depends(get_current_user)
):
    """Verifica si el usuario tiene categor√≠as disponibles para crear conversaciones."""
    try:
        # Importar CategoryManager y DocumentProcessor
        from core.category_manager import CategoryManager
        from core.document_processor import DocumentProcessor
        
        category_manager = CategoryManager()
        doc_processor = DocumentProcessor()
        
        # Obtener categor√≠as del usuario
        categorias = category_manager.get_user_categories(current_user.id)
        print(f"üìä Categor√≠as encontradas: {len(categorias)}")
        
        if not categorias:
            return {
                "success": True,
                "puede_crear_conversacion": False,
                "total_categorias": 0,
                "categorias_con_documentos": 0,
                "categorias_disponibles": [],
                "mensaje": "No tienes categor√≠as creadas. Ve a 'Entrenar' ‚Üí 'Gestionar Categor√≠as'",
                "detalle": "Sin categor√≠as"
            }
        
        # Verificar documentos en Supabase Y Qdrant
        categorias_con_documentos = []
        stats = category_manager.get_category_statistics(current_user.id)
        
        # Verificar tambi√©n colecci√≥n de Qdrant del usuario (con manejo de errores)
        qdrant_stats = {"total_documents": 0, "collection_exists": False, "error": None}
        try:
            qdrant_stats = doc_processor.get_user_collection_stats(current_user.id)
            print(f"üìã Qdrant collection stats: {qdrant_stats}")
        except Exception as qdrant_error:
            print(f"‚ö†Ô∏è Error obteniendo stats de Qdrant (no cr√≠tico): {qdrant_error}")
            qdrant_stats["error"] = str(qdrant_error)
        
        for categoria in categorias:
            categoria_stats = next((s for s in stats['categories'] if s['categoria_id'] == categoria['id']), None)
            
            if categoria_stats and categoria_stats['documentos_procesados'] > 0:
                categorias_con_documentos.append({
                    'id': categoria['id'],
                    'nombre': categoria['nombre'],
                    'documentos_procesados': categoria_stats['documentos_procesados'],
                    'documentos_pendientes': categoria_stats.get('documentos_pendientes', 0)
                })
        
        puede_crear_conversacion = len(categorias_con_documentos) > 0
        
        # Mensaje detallado seg√∫n la situaci√≥n
        if puede_crear_conversacion:
            mensaje = f"‚úÖ Listo para crear conversaciones con {len(categorias_con_documentos)} categor√≠as entrenadas"
            detalle = f"Colecci√≥n Qdrant: {qdrant_stats.get('collection_name', 'N/A')} ({qdrant_stats.get('total_documents', 0)} docs)"
        else:
            nombres_categorias = [c['nombre'] for c in categorias]
            mensaje = f"‚ö†Ô∏è Tienes {len(categorias)} categor√≠as ({', '.join(nombres_categorias)}) pero ninguna tiene documentos procesados"
            detalle = "Ve a 'Entrenar' ‚Üí 'Subir Documentos' para agregar contenido"
        
        return {
            "success": True,
            "puede_crear_conversacion": puede_crear_conversacion,
            "total_categorias": len(categorias),
            "categorias_con_documentos": len(categorias_con_documentos),
            "categorias_disponibles": categorias_con_documentos,
            "mensaje": mensaje,
            "detalle": detalle,
            "qdrant_stats": qdrant_stats
        }
        
    except Exception as e:
        print(f"‚ùå Error verificando categor√≠as: {str(e)}")
        return {
            "success": False,
            "puede_crear_conversacion": False,
            "error": str(e),
            "mensaje": "Error verificando categor√≠as disponibles"
        } 
#!/usr/bin/env python3
"""
Script de prueba para verificar que las categor√≠as se muestran correctamente
al iniciar una nueva conversaci√≥n cuando el abogado tiene categor√≠as creadas.
"""

import asyncio
import sys
import os
from datetime import datetime

# Agregar el directorio backend al path
sys.path.append(os.path.join(os.path.dirname(__file__), 'backend'))

async def test_categorias_internas():
    """Prueba la l√≥gica interna de categor√≠as sin autenticaci√≥n."""
    
    print("üß™ PRUEBA: L√≥gica Interna de Categor√≠as")
    print("=" * 60)
    
    try:
        # Importar m√≥dulos del backend
        from core.category_manager import CategoryManager
        from supabase_integration import supabase_admin
        
        # Instanciar el manager de categor√≠as
        category_manager = CategoryManager()
        
        # Usuario de prueba
        user_id = "ae35cd1f-cf86-40b3-9c0d-eb7b6109f413"
        
        print(f"\nüìä PASO 1: Verificando categor√≠as para usuario {user_id}...")
        
        # Obtener categor√≠as del usuario
        categories = category_manager.get_user_categories(user_id)
        print(f"‚úÖ Categor√≠as encontradas: {len(categories)}")
        
        for cat in categories:
            print(f"   üìÅ {cat.get('nombre')} - {cat.get('descripcion', 'Sin descripci√≥n')}")
            print(f"      üé® Color: {cat.get('color', '#6366f1')}")
            print(f"      üîñ Icono: {cat.get('icon', 'üìÅ')}")
            print(f"      ‚úÖ Activo: {cat.get('activo', True)}")
        
        # Verificar estad√≠sticas
        print(f"\nüìà PASO 2: Verificando estad√≠sticas de categor√≠as...")
        
        stats = category_manager.get_category_statistics(user_id)
        print(f"üìä Estad√≠sticas:")
        print(f"   üìÅ Total categor√≠as: {stats.get('total_categorias', 0)}")
        print(f"   üìÑ Total documentos: {stats.get('total_documentos', 0)}")
        print(f"   ‚úÖ Documentos procesados: {stats.get('documentos_procesados', 0)}")
        
        # Verificar categor√≠as con documentos procesados
        print(f"\nüîç PASO 3: Verificando categor√≠as con documentos procesados...")
        
        categorias_con_docs = []
        for cat in categories:
            if cat.get('activo', True):
                # Verificar documentos procesados para esta categor√≠a
                try:
                    result = supabase_admin.table("documentos_entrenamiento")\
                        .select("id,estado_procesamiento")\
                        .eq("categoria_id", cat['id'])\
                        .eq("estado_procesamiento", "completado")\
                        .execute()
                    
                    docs_procesados = len(result.data) if result.data else 0
                    if docs_procesados > 0:
                        categorias_con_docs.append({
                            'nombre': cat['nombre'],
                            'docs_procesados': docs_procesados
                        })
                        print(f"   ‚úÖ {cat['nombre']}: {docs_procesados} documentos procesados")
                    else:
                        print(f"   ‚ö†Ô∏è {cat['nombre']}: 0 documentos procesados")
                except Exception as e:
                    print(f"   ‚ùå Error verificando {cat['nombre']}: {e}")
        
        print(f"\nüìã RESUMEN:")
        print(f"   üìÅ Categor√≠as totales: {len(categories)}")
        print(f"   ‚úÖ Categor√≠as con documentos: {len(categorias_con_docs)}")
        
        if len(categorias_con_docs) > 0:
            print(f"\n‚úÖ CORRECTO: El usuario tiene categor√≠as con documentos procesados")
            print(f"   Las categor√≠as se mostrar√°n al iniciar una nueva conversaci√≥n")
        else:
            print(f"\n‚ö†Ô∏è ATENCI√ìN: El usuario no tiene categor√≠as con documentos procesados")
            print(f"   Se mostrar√° el mensaje para configurar categor√≠as")
        
        # Simular verificaci√≥n de chat
        print(f"\nüöÄ PASO 4: Simulando verificaci√≥n para chat...")
        
        try:
            # Verificar si puede crear conversaci√≥n
            categorias_validas = []
            for cat in categories:
                if cat.get('activo', True):
                    result = supabase_admin.table("documentos_entrenamiento")\
                        .select("id")\
                        .eq("categoria_id", cat['id'])\
                        .eq("estado_procesamiento", "completado")\
                        .execute()
                    
                    if result.data and len(result.data) > 0:
                        categorias_validas.append(cat['nombre'])
            
            print(f"‚úÖ Categor√≠as v√°lidas para chat: {categorias_validas}")
            
            if len(categorias_validas) > 0:
                print(f"‚úÖ El usuario PUEDE crear conversaciones")
                print(f"   Se mostrar√°n las categor√≠as: {', '.join(categorias_validas)}")
            else:
                print(f"‚ùå El usuario NO puede crear conversaciones")
                print(f"   Se mostrar√° mensaje de configuraci√≥n")
                
        except Exception as e:
            print(f"‚ùå Error en verificaci√≥n de chat: {e}")
        
        print("\n" + "=" * 60)
        print("‚úÖ PRUEBA COMPLETADA")
        
    except Exception as e:
        print(f"‚ùå Error en la prueba: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    print(f"üïê Iniciando prueba: {datetime.now().strftime('%H:%M:%S')}")
    asyncio.run(test_categorias_internas()) 
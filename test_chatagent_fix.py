#!/usr/bin/env python3
"""
Script para probar el ChatAgent despu√©s de las correcciones del error NoneType.
"""

import sys
import os
import traceback
from dotenv import load_dotenv

# Cargar variables de entorno
load_dotenv()

# Agregar el directorio ra√≠z al path
sys.path.append('.')

def test_openai_key():
    """Verifica que la clave de OpenAI est√© configurada."""
    print("üîë Verificando clave de OpenAI...")
    
    api_key = os.getenv("OPENAI_API_KEY")
    if not api_key:
        print("‚ùå OPENAI_API_KEY no est√° configurada")
        return False
    
    if len(api_key) < 20:
        print("‚ùå OPENAI_API_KEY parece estar mal configurada (muy corta)")
        return False
    
    print(f"‚úÖ OPENAI_API_KEY configurada correctamente (longitud: {len(api_key)})")
    return True

def test_chatagent_initialization():
    """Verifica que el ChatAgent se pueda inicializar."""
    print("\nü§ñ Probando inicializaci√≥n del ChatAgent...")
    
    try:
        from rag.chat_agent import ChatAgentInteligente
        
        agent = ChatAgentInteligente()
        print("‚úÖ ChatAgent inicializado exitosamente")
        print(f"üìã Tipos disponibles: {len(agent.tipos_disponibles)}")
        
        return agent
    except Exception as e:
        print(f"‚ùå Error inicializando ChatAgent: {e}")
        traceback.print_exc()
        return None

def test_basic_message_processing(agent):
    """Prueba el procesamiento b√°sico de mensajes."""
    print("\nüí¨ Probando procesamiento de mensajes...")
    
    try:
        # Crear sesi√≥n de prueba
        session = {
            'datos_cliente': {},
            'tipo_demanda': '',
            'hechos_adicionales': '',
            'notas_abogado': '',
            'estado': 'inicio'
        }
        
        # Mensaje de prueba simple
        mensaje = "Hola, necesito ayuda con una demanda laboral"
        session_id = "test-123"
        
        print(f"üìù Enviando mensaje: {mensaje}")
        resultado = agent.procesar_mensaje(session, mensaje, session_id)
        
        if resultado and isinstance(resultado, dict):
            print("‚úÖ Mensaje procesado exitosamente")
            print(f"üì§ Respuesta: {resultado.get('mensaje', 'Sin mensaje')[:100]}...")
            return True
        else:
            print("‚ùå El resultado no es v√°lido")
            return False
            
    except Exception as e:
        print(f"‚ùå Error procesando mensaje: {e}")
        traceback.print_exc()
        return False

def test_data_extraction(agent):
    """Prueba la extracci√≥n de datos espec√≠ficos."""
    print("\nüîç Probando extracci√≥n de datos...")
    
    try:
        # Crear sesi√≥n con tipo ya seleccionado
        session = {
            'datos_cliente': {},
            'tipo_demanda': 'Empleados En Blanco',
            'hechos_adicionales': '',
            'notas_abogado': '',
            'estado': 'conversando'
        }
        
        # Mensaje con datos espec√≠ficos
        mensaje = "Gino Gentile, Paraguay 2536, 35703591, me despidieron sin causa de la empresa GEDCO"
        session_id = "test-456"
        
        print(f"üìù Enviando datos: {mensaje}")
        resultado = agent.procesar_mensaje(session, mensaje, session_id)
        
        if resultado and isinstance(resultado, dict):
            print("‚úÖ Datos procesados exitosamente")
            print(f"üìã Datos extra√≠dos en sesi√≥n: {session.get('datos_cliente', {})}")
            print(f"üìù Hechos: {session.get('hechos_adicionales', 'N/A')[:50]}...")
            return True
        else:
            print("‚ùå Error en extracci√≥n de datos")
            return False
            
    except Exception as e:
        print(f"‚ùå Error extrayendo datos: {e}")
        traceback.print_exc()
        return False

def main():
    """Funci√≥n principal de pruebas."""
    print("üß™ PRUEBAS DEL CHATAGENT CORREGIDO")
    print("=" * 50)
    
    # Test 1: Verificar clave de OpenAI
    if not test_openai_key():
        print("\n‚ùå Las pruebas no pueden continuar sin la clave de OpenAI")
        return
    
    # Test 2: Inicializar ChatAgent
    agent = test_chatagent_initialization()
    if not agent:
        print("\n‚ùå Las pruebas no pueden continuar sin ChatAgent")
        return
    
    # Test 3: Procesamiento b√°sico
    if not test_basic_message_processing(agent):
        print("\n‚ùå Error en procesamiento b√°sico")
        return
    
    # Test 4: Extracci√≥n de datos
    if not test_data_extraction(agent):
        print("\n‚ùå Error en extracci√≥n de datos")
        return
    
    print("\n‚úÖ TODAS LAS PRUEBAS PASARON EXITOSAMENTE")
    print("üéâ El ChatAgent est√° funcionando correctamente")

if __name__ == "__main__":
    main() 
#!/usr/bin/env python3
"""
Script para probar las mejoras implementadas en el ChatAgent:
1. Mostrar informaci√≥n extra√≠da autom√°ticamente
2. Tipos de demanda din√°micos por abogado
3. Flujo m√°s inteligente y directo
"""

import sys
import os
import asyncio
sys.path.append('.')

async def test_mejoras_implementadas():
    """Test de las mejoras implementadas en el ChatAgent."""
    
    print("üß™ PROBANDO MEJORAS IMPLEMENTADAS EN CHATAGENT")
    print("=" * 60)
    
    try:
        from rag.chat_agent import ChatAgentInteligente, get_chat_agent
        
        # Test 1: Verificar tipos din√°micos por abogado
        print("\n1Ô∏è‚É£ TEST: Tipos din√°micos por abogado")
        print("-" * 40)
        
        # Simular user_id de un abogado
        user_id_test = "test-user-123"
        
        # Crear ChatAgent con user_id
        agent = ChatAgentInteligente(user_id=user_id_test)
        print(f"‚úÖ ChatAgent creado con user_id: {user_id_test}")
        print(f"‚úÖ Tipos disponibles: {agent.tipos_disponibles}")
        
        # Test 2: Verificar funci√≥n de informaci√≥n extra√≠da
        print("\n2Ô∏è‚É£ TEST: Funci√≥n de informaci√≥n extra√≠da")
        print("-" * 40)
        
        # Simular cambios autom√°ticos detectados
        cambios_automaticos = {
            'nombre_completo': 'Juan P√©rez',
            'tipo_demanda': 'Empleados En Negro',
            'hechos_adicionales': 'Documento indica: Despido laboral, Trabajo en negro. Contexto: Telegrama de despido sin causa aparente...'
        }
        
        session = {
            'datos_cliente': {},
            'tipo_demanda': '',
            'hechos_adicionales': '',
            'estado': 'inicio'
        }
        
        mensaje_info = agent._generar_mensaje_informacion_extraida(cambios_automaticos, session, 'test-session-123')
        print(f"‚úÖ Mensaje de informaci√≥n extra√≠da generado: {len(mensaje_info)} caracteres")
        print(f"Contenido: {mensaje_info[:200]}...")
        
        # Test 3: Verificar flujo completo con informaci√≥n autom√°tica
        print("\n3Ô∏è‚É£ TEST: Flujo completo con informaci√≥n autom√°tica")
        print("-" * 40)
        
        # Simular sesi√≥n con informaci√≥n autom√°tica detectada
        session_completa = {
            'datos_cliente': {'nombre_completo': 'Mar√≠a Garc√≠a'},
            'tipo_demanda': 'Empleados En Blanco',
            'hechos_adicionales': 'Despido sin causa aparente',
            'estado': 'conversando'
        }
        
        # Simular mensaje del abogado
        mensaje_abogado = "He subido documentos del caso"
        
        print(f"üìù Mensaje del abogado: {mensaje_abogado}")
        print(f"üìã Sesi√≥n actual: {session_completa}")
        
        # Procesar mensaje
        resultado = await agent.procesar_mensaje(session_completa, mensaje_abogado, 'test-session-456')
        
        print(f"‚úÖ Resultado del procesamiento:")
        print(f"   Mensaje: {resultado.get('mensaje', '')[:100]}...")
        print(f"   Informaci√≥n extra√≠da: {resultado.get('informacion_extraida', False)}")
        print(f"   Mostrar confirmaci√≥n: {resultado.get('mostrar_confirmacion', False)}")
        
        # Test 4: Verificar funci√≥n get_chat_agent con user_id
        print("\n4Ô∏è‚É£ TEST: Funci√≥n get_chat_agent con user_id")
        print("-" * 40)
        
        agent_global = get_chat_agent(user_id=user_id_test)
        if agent_global:
            print(f"‚úÖ get_chat_agent con user_id funcionando")
            print(f"   Tipos disponibles: {agent_global.tipos_disponibles}")
        else:
            print("‚ùå get_chat_agent con user_id fall√≥")
        
        # Test 5: Verificar detecci√≥n autom√°tica
        print("\n5Ô∏è‚É£ TEST: Detecci√≥n autom√°tica de informaci√≥n")
        print("-" * 40)
        
        session_vacia = {
            'datos_cliente': {},
            'tipo_demanda': '',
            'hechos_adicionales': '',
            'estado': 'inicio'
        }
        
        # Simular que hay documentos procesados (esto normalmente vendr√≠a de la base de datos)
        print("üìÑ Simulando documentos procesados...")
        
        # La funci√≥n _detectar_informacion_automatica intentar√° obtener informaci√≥n de la base de datos
        # Como estamos en test, probablemente no encuentre documentos, pero deber√≠a funcionar sin errores
        cambios = agent._detectar_informacion_automatica(session_vacia, 'test-session-789')
        print(f"‚úÖ Detecci√≥n autom√°tica completada: {len(cambios)} cambios detectados")
        
        print("\nüéØ RESUMEN DE PRUEBAS:")
        print("‚úÖ Tipos din√°micos por abogado - IMPLEMENTADO")
        print("‚úÖ Funci√≥n de informaci√≥n extra√≠da - IMPLEMENTADA")
        print("‚úÖ Flujo con informaci√≥n autom√°tica - IMPLEMENTADO")
        print("‚úÖ get_chat_agent con user_id - IMPLEMENTADO")
        print("‚úÖ Detecci√≥n autom√°tica - IMPLEMENTADA")
        
        print("\nüöÄ TODAS LAS MEJORAS IMPLEMENTADAS EXITOSAMENTE!")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Error en las pruebas: {e}")
        import traceback
        traceback.print_exc()
        return False

async def test_integracion_completa():
    """Test de integraci√≥n completa del flujo mejorado."""
    
    print("\nüîó TEST DE INTEGRACI√ìN COMPLETA")
    print("=" * 50)
    
    try:
        from rag.chat_agent import ChatAgentInteligente
        
        # Simular el flujo completo de un abogado
        print("üë®‚Äçüíº Simulando flujo de abogado...")
        
        # 1. Abogado inicia conversaci√≥n
        agent = ChatAgentInteligente(user_id="abogado-test-123")
        session = {
            'datos_cliente': {},
            'tipo_demanda': '',
            'hechos_adicionales': '',
            'estado': 'inicio'
        }
        
        print("\nüìù PASO 1: Abogado dice 'Hola'")
        resultado1 = await agent.procesar_mensaje(session, "Hola", "session-1")
        print(f"   Respuesta: {resultado1.get('mensaje', '')[:100]}...")
        
        # 2. Abogado sube documentos
        print("\nüì§ PASO 2: Abogado sube documentos")
        # Simular que se detect√≥ informaci√≥n autom√°ticamente
        session_con_info = {
            'datos_cliente': {'nombre_completo': 'Carlos L√≥pez'},
            'tipo_demanda': 'Empleados En Negro',
            'hechos_adicionales': 'Despido sin causa, trabajo en negro',
            'estado': 'conversando'
        }
        
        resultado2 = await agent.procesar_mensaje(session_con_info, "He subido los documentos", "session-1")
        print(f"   Respuesta: {resultado2.get('mensaje', '')[:100]}...")
        print(f"   Informaci√≥n extra√≠da: {resultado2.get('informacion_extraida', False)}")
        
        # 3. Abogado confirma informaci√≥n
        print("\n‚úÖ PASO 3: Abogado confirma informaci√≥n")
        session_confirmada = {
            'datos_cliente': {'nombre_completo': 'Carlos L√≥pez', 'dni': '12345678'},
            'tipo_demanda': 'Empleados En Negro',
            'hechos_adicionales': 'Despido sin causa, trabajo en negro, empresa XYZ',
            'estado': 'conversando'
        }
        
        resultado3 = await agent.procesar_mensaje(session_confirmada, "S√≠, esa informaci√≥n es correcta", "session-1")
        print(f"   Respuesta: {resultado3.get('mensaje', '')[:100]}...")
        print(f"   Mostrar confirmaci√≥n: {resultado3.get('mostrar_confirmacion', False)}")
        
        print("\nüéâ FLUJO DE INTEGRACI√ìN COMPLETADO EXITOSAMENTE!")
        return True
        
    except Exception as e:
        print(f"‚ùå Error en integraci√≥n: {e}")
        import traceback
        traceback.print_exc()
        return False

if __name__ == "__main__":
    print("üöÄ INICIANDO PRUEBAS DE MEJORAS IMPLEMENTADAS")
    print("=" * 70)
    
    # Ejecutar pruebas
    resultado1 = asyncio.run(test_mejoras_implementadas())
    resultado2 = asyncio.run(test_integracion_completa())
    
    if resultado1 and resultado2:
        print("\nüéØ TODAS LAS PRUEBAS PASARON EXITOSAMENTE!")
        print("‚úÖ Las mejoras est√°n funcionando correctamente")
        print("\nüìã RESUMEN DE MEJORAS IMPLEMENTADAS:")
        print("1. ‚úÖ Informaci√≥n extra√≠da se muestra autom√°ticamente")
        print("2. ‚úÖ Tipos de demanda din√°micos por abogado")
        print("3. ‚úÖ Flujo m√°s directo y eficiente")
        print("4. ‚úÖ Mejor experiencia de usuario")
        print("5. ‚úÖ Integraci√≥n completa funcionando")
    else:
        print("\n‚ùå ALGUNAS PRUEBAS FALLARON")
        print("‚ö†Ô∏è Revisar implementaci√≥n")
    
    print("\nüèÅ PRUEBAS COMPLETADAS") 